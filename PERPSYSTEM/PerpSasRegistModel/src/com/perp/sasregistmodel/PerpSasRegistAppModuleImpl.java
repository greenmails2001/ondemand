package com.perp.sasregistmodel;


import com.oracle.adffwkextensions.faces.FacesUtils;
import com.oracle.adffwkextensions.utils.DateUtils;

import com.perp.beans.AccountBean;
import com.perp.beans.DBUtils;
import com.perp.beans.LoginHistoryBean;
import com.perp.beans.PerpEnvChecking;
import com.perp.beans.PerpRegistAdminChecking;
import com.perp.beans.PerpSasrAccount;
import com.perp.beans.PerpSasrAccountChecking;

import com.perp.beans.PerpUtils;
import com.perp.beans.RandomStringUtils;
import com.perp.beans.SasrSessionLoginObject;

import com.perp.sasregistmodel.common.PerpSasRegistAppModule;
import com.perp.sasregistmodel.views.common.AccountsRow;
import com.perp.sasregistmodel.views.common.LoginHistoriesViewRow;
import com.perp.sasregistmodel.views.sasr002.VbisUsersViewImpl;

import com.perp.sasregistmodel.views.sasr002.common.Sasr002A2SubscriptionsRow;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Sequence;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 16 13:41:31 ICT 2009
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PerpSasRegistAppModuleImpl extends ApplicationModuleImpl implements PerpSasRegistAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public PerpSasRegistAppModuleImpl() {
    }

    /**
     * Container's getter for Sasra001ServicePackages.
     * @return Sasra001ServicePackages
     */
    public ViewObjectImpl getSasra001ServicePackages() {
        return (ViewObjectImpl)findViewObject("Sasra001ServicePackages");
    }

    private void systemPrint(String message) {
        System.out.println(message);
    }

    public PerpEnvChecking doPerpEnvChecking(String subscriptionCode) {
        // áyvao day roi a // OK cho nay no tim kiem nguoi thue bao PE?PER,        
        DBTransaction trans = this.getDBTransaction();
        String sql1 =
            "Select Sub.Sub_Id ,Spa.Package_Code ,Acc.Full_Name ,Acc.Organization_Name, Acc.Acc_Id \n" +
            "From   Subscriptions    Sub ,Service_Packages Spa ,Accounts         Acc\n" +
            "Where  Spa.Spa_Id = Sub.Spa_Id\n" +
            "And    Acc.Acc_Id = Sub.Acc_Id\n" +
            "And    Upper(Sub.Activated_Code) = ?";
        String sql2 =
            "Select Env_Pkg.Env_Id Env_Id " + "      ,Env_Pkg.Sub_Id Sub_Id " +
            "      ,Env_Pkg.Db_Host Db_Host " +
            "      ,Env_Pkg.Db_Port Db_Port " + "      ,Env_Pkg.Sid Sid " +
            "      ,Env_Pkg.Db_User Db_User " +
            "      ,Env_Pkg.Db_Pwd Db_Pwd " +
            "      ,Env_Pkg.App_Host App_Host " +
            "      ,Env_Pkg.App_Port App_Port " +
            "      ,Env_Pkg.Jdbc_Url Jdbc_Url " +
            "      ,Env_Pkg.Setup_Date Setup_Date " +
            "      ,Env_Pkg.Removed_Date Removed_Date " +
            "      ,Env_Pkg.Current_Num_Of_App_User Current_Num_Of_App_User " +
            "      ,Env_Pkg.Description Description " +
            "      ,'activatedCode' Activated_Code " + "From   Dual " +
            " Where  Env_Pkg.Get_Env(?) = 'Y'";

        PreparedStatement pstm = null;
        ResultSet rs = null;
        PerpEnvChecking info = new PerpEnvChecking();
        Long subId = null;
        Number accId = null;
        String packageCode = null;
        String fullName = null;
        String organizationName = null;

        try {
            boolean iscontinue = true;
            try {
                pstm = trans.createPreparedStatement(sql1, 1);
                pstm.setString(1, subscriptionCode.toUpperCase());
                rs = pstm.executeQuery();
                if (rs.next()) {
                    info.setToSubscriptionFound();
                    subId = rs.getLong(1);
                    packageCode = rs.getString(2);
                    fullName = rs.getString(3);
                    organizationName = rs.getString(4);
                    accId = new oracle.jbo.domain.Number(rs.getLong(5));
                    info.setSubId(subId);
                    info.setAccId(accId);
                    info.getSubscriptionInfo().setSubId(subId);
                    info.getSubscriptionInfo().setPackageCode(packageCode);
                    info.getSubscriptionInfo().setFullName(fullName);
                    info.getSubscriptionInfo().setOrganizationName(organizationName);
                    info.getSubscriptionInfo().setSubscriptionCode(subscriptionCode);
                    //this.systemPrint("Found Subscriptions with code ="+subscriptionCode);
                } else {
                    info.setToSubscriptionNotFound();
                    iscontinue = false;
                    //this.systemPrint("Subscription with code ="+subscriptionCode+" not found!");
                }
            } catch (Exception e) {
                iscontinue = false;
            }

            if (iscontinue) {
                try {
                    pstm = trans.createPreparedStatement(sql2, 1);
                    //this.systemPrint("SQL="+sql2 +" / subId="+subId);
                    pstm.setLong(1, subId);
                    rs = pstm.executeQuery();
                    if (rs.next()) {
                        info.setToEnvInfoFound();
                        info.getPerpSasEnv().setEnvId(rs.getLong("Env_Id"));
                        info.getPerpSasEnv().setSubId(rs.getLong("Sub_Id"));
                        info.getPerpSasEnv().setDbHost(rs.getString("Db_Host"));
                        info.getPerpSasEnv().setDbPort(rs.getInt("Db_Port"));
                        info.getPerpSasEnv().setSid(rs.getString("Sid"));
                        info.getPerpSasEnv().setDbUser(rs.getString("Db_User"));
                        info.getPerpSasEnv().setDbPwd(rs.getString("Db_Pwd"));
                        info.getPerpSasEnv().setAppHost(rs.getString("App_Host"));
                        info.getPerpSasEnv().setAppPort(rs.getInt("App_Port"));
                        info.getPerpSasEnv().setSetupDate(rs.getTimestamp("Setup_Date"));
                        info.getPerpSasEnv().setRemovedDate(rs.getTimestamp("Removed_Date"));
                        info.getPerpSasEnv().setCurrentNumOfAppUser(rs.getInt("Current_Num_Of_App_User"));
                        info.getPerpSasEnv().setDescription(rs.getString("Description"));
                        info.getPerpSasEnv().setActivatedCode(rs.getString("Activated_Code"));
                        info.getPerpSasEnv().setJdbcURL(rs.getString("Jdbc_Url"));
                    } else {
                        info.setToEnvInfoNotFound();
                        this.systemPrint("Environment not found! for code " +
                                         subscriptionCode);
                    }
                } catch (Exception e) {
                    info.setToEnvInfoNotFound();
                }
            }
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
        return info;
    }

    public PerpRegistAdminChecking doPerpRegistAdminChecking(String userName,
                                                             String password) {
        PerpRegistAdminChecking checkObj = new PerpRegistAdminChecking();
        checkObj.setUserName(userName);
        checkObj.setPassword(password);
        return checkObj;
    }


    /**
     * Container's getter for Sasra002aCountries.
     * @return Sasra002aCountries
     */
    public ViewObjectImpl getSasra002aCountries() {
        return (ViewObjectImpl)findViewObject("Sasra002aCountries");
    }


    /**
     * Container's getter for Sasra002aProvincesX1.
     * @return Sasra002aProvincesX1
     */
    public ViewObjectImpl getSasra002aProvincesX1() {
        return (ViewObjectImpl)findViewObject("Sasra002aProvincesX1");
    }

    /**
     * Container's getter for Sasra002aProvinces_Sasra002aCountries1.
     * @return Sasra002aProvinces_Sasra002aCountries1
     */
    public ViewLinkImpl getSasra002aProvinces_Sasra002aCountries1() {
        return (ViewLinkImpl)findViewLink("Sasra002aProvinces_Sasra002aCountries1");
    }


    //    public boolean isEmailExistsInAccountsTable(String email) {
    //        String sql = "Select 1 from accounts x where lower(x.email)=?";
    //        DBTransaction trans = this.getDBTransaction();
    //        PreparedStatement pstm = null;
    //        ResultSet rs = null;
    //        try {
    //            pstm = trans.createPreparedStatement(sql, 1);
    //            pstm.setString(1, email == null ? null : email.toLowerCase());
    //            rs = pstm.executeQuery();
    //            if (rs.next()) {
    //                return true;
    //            }
    //        } catch (SQLException e) {
    //            throw new JboException(e.getMessage());
    //        } finally {
    //            DBUtils.close(rs);
    //            DBUtils.close(pstm);
    //        }
    //        return false;
    //    }

    public boolean isUserExistsInAccountsTable(String username) {
        String sql = "Select 1 from accounts x where lower(x.User_Name)=?";
        DBTransaction trans = this.getDBTransaction();
        PreparedStatement pstm = null;
        ResultSet rs = null;
        try {
            pstm = trans.createPreparedStatement(sql, 1);
            pstm.setString(1,
                           username == null ? null : username.toLowerCase());
            rs = pstm.executeQuery();
            if (rs.next()) {
                return true;
            }
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
        return false;
    }

    /**
     * Container's getter for SasrmLovCountries.
     * @return SasrmLovCountries
     */
    public ViewObjectImpl getSasrmLovCountries() {
        return (ViewObjectImpl)findViewObject("SasrmLovCountries");
    }

    /**
     * Container's getter for SasrmLovIndustries.
     * @return SasrmLovIndustries
     */
    public ViewObjectImpl getSasrmLovIndustries() {
        return (ViewObjectImpl)findViewObject("SasrmLovIndustries");
    }

    /**
     * Container's getter for SasrmLovLabors.
     * @return SasrmLovLabors
     */
    public ViewObjectImpl getSasrmLovLabors() {
        return (ViewObjectImpl)findViewObject("SasrmLovLabors");
    }

    /**
     * Container's getter for SasrmLovMarketingMedia.
     * @return SasrmLovMarketingMedia
     */
    public ViewObjectImpl getSasrmLovMarketingMedia() {
        return (ViewObjectImpl)findViewObject("SasrmLovMarketingMedia");
    }

    /**
     * Container's getter for SasrmLovRoles.
     * @return SasrmLovRoles
     */
    public ViewObjectImpl getSasrmLovRoles() {
        return (ViewObjectImpl)findViewObject("SasrmLovRoles");
    }

    private PerpSasrAccount getPerpSasrAccount(oracle.jbo.domain.Number accId) {
        ViewObjectImpl view = this.getSasrmAccounts();
        Key key = new Key(new Object[] { accId });
        Row[] rows = view.findByKey(key, 1);
        if (rows == null || rows.length == 0) {
            return null;
        }
        System.out.println("Row count " + rows.length);
        AccountsRow row = (AccountsRow)rows[0];
        System.out.println("ACCOUNT " + row.getAccId());
        PerpSasrAccount account = new PerpSasrAccount();
        account.setAccId(row.getAccId());
        account.setActivatedFlag(row.getActivatedFlag());
        account.setActivedCode(row.getActivedCode());
        account.setIsAdmin(row.getIsAdmin());
        account.setAddress(row.getAddress());
        account.setContactTelephone(row.getContactTelephone());
        account.setCouId(row.getCouId());
        account.setCustomerApproach(row.getCustomerApproach());
        account.setEmail(row.getEmail());
        account.setFullName(row.getFullName());
        account.setIndId(row.getIndId());
        account.setLabId(row.getLabId());
        account.setMmeId(row.getMmeId());
        account.setNumberOfEmployee(row.getNumberOfEmployee());
        account.setOrganizationName(row.getOrganizationName());
        account.setPassword(row.getPassword());
        account.setProId(row.getProId());
        account.setRolId(row.getRolId());
        account.setSecurityAnswer(row.getSecurityAnswer());
        account.setSquId(row.getSquId());
        account.setStatus(row.getStatus());
        account.setTaxCode(row.getTaxCode());
        account.setUserName(row.getUserName());
        return account;
    }

    public PerpSasrAccountChecking doPerpSasrAccountChecking(String userName,
                                                             String password) {
        String sql =
            "Select Acc.Acc_Id ,Acc.Full_Name  ,Acc.Email ,Acc.User_Name, Acc.Password,Acc.Activated_Flag, Acc.Is_Admin " +
            " From   Accounts Acc " +
            "Where  lower(Acc.User_Name) = :p_User_Name ";
        DBTransaction trans = this.getDBTransaction();
        PreparedStatement pstm = null;
        ResultSet rs = null;
        PerpSasrAccountChecking checking = new PerpSasrAccountChecking();
        try {
            pstm = trans.createPreparedStatement(sql, 1);
            pstm.setString(1, userName.toLowerCase());
            rs = pstm.executeQuery();
            if (rs.next()) {
                checking.setToUserFound();
                Long accId = rs.getLong("Acc_Id");
                String password2 = rs.getString("Password");
                String activatedFlag = rs.getString("Activated_Flag");
                String isAdmin = rs.getString("Is_Admin");

                boolean activated =
                    (activatedFlag != null && activatedFlag.equals("Y")) ?
                    true : false;

                boolean isIsAdmin =
                    (isAdmin != null && isAdmin.equals("Y")) ? true : false;

                if (password2.equals(PerpUtils.EncryptPassword(password))) {
                    checking.setToPasswordValid();
                    PerpSasrAccount account =
                        this.getPerpSasrAccount(new oracle.jbo.domain.Number(accId));
                    checking.setPerpSasrAccount(account);
                    account.setActivated(activated);

                    if (activated) {
                        checking.setToAccountActivated();
                    }
                } else {
                    checking.setToPasswordInvalid();
                }
            } else {
                checking.setToUserNotFound();
            }

        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
        return checking;
    }

    /**
     * Container's getter for Sasr002A1ServicePackages.
     * @return Sasr002A1ServicePackages
     */
    public ViewObjectImpl getSasr002A1ServicePackages() {
        return (ViewObjectImpl)findViewObject("Sasr002A1ServicePackages");
    }

    /**
     * Lay ra doi tuong ViewObject tuong ung voi .
     * @param subId
     * @return
     */
    public ViewObject getUsingServicePackage(Long subId) {
        return null;
    }

    /**
     * Container's getter for Sasr002A2Subscriptions.
     * @return Sasr002A2Subscriptions
     */
    public ViewObjectImpl getSasr002A2Subscriptions() {
        return (ViewObjectImpl)findViewObject("Sasr002A2Subscriptions");
    }

    /**
     * Container's getter for Sasr002A2ServicePackages.
     * @return Sasr002A2ServicePackages
     */
    public ViewObjectImpl getSasr002A2ServicePackages() {
        return (ViewObjectImpl)findViewObject("Sasr002A2ServicePackages");
    }

    /**
     * Container's getter for Sasr002A2Subscriptions_Sasr002ServicePackages1.
     * @return Sasr002A2Subscriptions_Sasr002ServicePackages1
     */
    public ViewLinkImpl getSasr002A2Subscriptions_Sasr002ServicePackages1() {
        return (ViewLinkImpl)findViewLink("Sasr002A2Subscriptions_Sasr002ServicePackages1");
    }

    public void prepareToShowSasr002A2Subscriptions(Long accId) {
        ViewObjectImpl view = this.getSasr002A2Subscriptions();
        view.setNamedWhereClauseParam("p_Acc_Id", accId);
        view.executeQuery();
    }

    public void prepareToShowSasr002A3ServicePackages(Long spaId) {
        ViewObjectImpl view = this.getSasr002A3ServicePackages();
        view.setNamedWhereClauseParam("p_Spa_Id", spaId);
        view.executeQuery();
    }

    /**
     * Ghi chu : View nay co tham so , tuy nhien coi nhu tham so da duoc set dat truoc do .
     * @return
     */
    public Sasr002A2SubscriptionsRow getCurrentRowSasr002A2Subscriptions(oracle.jbo.domain.Number accId) {
        ViewObject view = this.getSasr002A2Subscriptions();
        view.setNamedWhereClauseParam("p_Acc_Id", accId);
        view.executeQuery();
        if (view.hasNext()) {
            // Goi next it nhat 1 lan , thi getCurrentRow moi co gia tri .
            view.next();
        }
        return (Sasr002A2SubscriptionsRow)view.getCurrentRow();
    }

    /**
     * Container's getter for Sasr002A3ServicePackages.
     * @return Sasr002A3ServicePackages
     */
    public ViewObjectImpl getSasr002A3ServicePackages() {
        return (ViewObjectImpl)findViewObject("Sasr002A3ServicePackages");
    }

    /**
     * Tao active code
     */
    public void createSasr002ASubscriptions(oracle.jbo.domain.Number accId,
                                            oracle.jbo.domain.Number spaId) {
        ViewObjectImpl view = this.getSasr002A2Subscriptions();
        Sasr002A2SubscriptionsRow row =
            (Sasr002A2SubscriptionsRow)view.createRow();
        RandomStringUtils strRandom = new RandomStringUtils();
        String randomActiveCode = strRandom.randomAlphanumeric(8);
        Sequence subSeq = new Sequence("Sub_Seq", this);
        oracle.jbo.domain.Number subId =
            new oracle.jbo.domain.Number(subSeq.getValue());
        row.setSubId(subId);
        row.setSubscribeDate(DateUtils.getOracleSysdate());
        row.setAccId(accId);
        row.setSpaId(spaId);
        row.setActivatedCode(randomActiveCode.toUpperCase());
        //row.setActivatedCode("PERP" + subId);
        row.setStatus("N");
        this.getTransaction().commit();
    }


    public boolean activeAccount(oracle.jbo.domain.Number accId,
                                 String activeCode) {
        DBTransaction transaction = this.getDBTransaction();
        String sql2 =
            "Update accounts acc set acc.activated_flag ='Y' where acc.acc_id=? and acc.actived_code = ?";
        PreparedStatement pstm = null;
        try {
            pstm = transaction.createPreparedStatement(sql2, 2);
            pstm.setObject(1, accId);
            pstm.setString(2, activeCode);
            int rs = pstm.executeUpdate();
            transaction.commit();
            return rs > 0;
        } catch (Exception e) {
            System.out.println("Error activeAccount :" + e);
            transaction.rollback();
            return false;
        } finally {
            DBUtils.close(pstm);
        }
    }

    public void reSendEmailActiveAccount(oracle.jbo.domain.Number accId) {
        DBTransaction transaction = this.getDBTransaction();
        String sql2 = "{call Send_Message_Pkg.Send_Message_Active_Acc(?)}";
        PreparedStatement pstm = null;
        try {
            pstm = transaction.createPreparedStatement(sql2, 2);
            pstm.setObject(1, accId);
            int rs = pstm.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error sendEmailActiveAccount :" + e);
        } finally {
            DBUtils.close(pstm);
        }
    }


    public AccountsRow createAccount(AccountBean account) throws JboException {
        try {
            ViewObjectImpl view = this.getSasrmAccounts();
            AccountsRow row = (AccountsRow)view.createRow();
            row.setActivedCode(account.getActivedCode());
            row.setAddress(account.getAddress());
            row.setContactTelephone(account.getContactTelephone());
            row.setCustomerApproach(account.getCustomerApproach());
            row.setEmail(account.getEmail());
            row.setFullName(account.getFullName());
            row.setNumberOfEmployee(account.getNumberOfEmployee());
            row.setOrganizationName(account.getOrganizationName());
            row.setPassword(account.getPassword());
            row.setSecurityAnswer(account.getSecurityAnswer());
            row.setStatus(account.getStatus());
            row.setTaxCode(account.getTaxCode());
            row.setUserName(account.getUserName());
            row.setCouId(account.getCouId());
            row.setIndId(account.getIndId());
            row.setLabId(account.getLabId());
            row.setMmeId(account.getMmeId());
            row.setProId(account.getProId());
            row.setRolId(account.getRolId());
            row.setSquId(account.getSquId());
            view.insertRow(row);
            this.getTransaction().commit();
            return row;
        } catch (Exception e) {
            this.getDBTransaction().rollback();
            e.printStackTrace();
            throw new JboException(e);
        }
    }


    /**
     * Container's getter for SasrmAccounts.
     * @return SasrmAccounts
     */
    public ViewObjectImpl getSasrmAccounts() {
        return (ViewObjectImpl)findViewObject("SasrmAccounts");
    }

    public void prepareToShowAccount() {
        SasrSessionLoginObject session =
            (SasrSessionLoginObject)FacesUtils.resolveExpression("#{sasrSessionLoginObject}");
        oracle.jbo.domain.Number accId =
            session.getPerpSasrAccount().getAccId();
        ViewObjectImpl view = this.getSasrmAccounts();
        view.setNamedWhereClauseParam("p_Acc_Id", accId);
        view.executeQuery();
    }

    //    public boolean sendMailNewPassword(String email) {
    //        String sql = "Select Acc_Id from accounts x where lower(x.email)=?";
    //        Long accId = null;
    //        String newPassword = RandomStringUtils.randomAlphanumeric(8);
    //        DBTransaction trans = this.getDBTransaction();
    //        PreparedStatement pstm = null;
    //        ResultSet rs = null;
    //        try {
    //            pstm = trans.createPreparedStatement(sql, 1);
    //            pstm.setString(1, email == null ? null : email.toLowerCase());
    //            rs = pstm.executeQuery();
    //            if (rs.next()) {
    //                accId = rs.getLong("Acc_Id");
    //            } else {
    //                return false;
    //            }
    //        } catch (SQLException e) {
    //            throw new JboException(e.getMessage());
    //        } finally {
    //            DBUtils.close(rs);
    //            DBUtils.close(pstm);
    //        }
    //
    //        ViewObjectImpl view = this.getSasrmAccounts();
    //        Key key = new Key(new Object[] { accId });
    //        Row[] rows = view.findByKey(key, 1);
    //        if (rows == null || rows.length == 0) {
    //            return false;
    //        }
    //        AccountsRow row = (AccountsRow)rows[0];
    //        row.setPassword(PerpUtils.EncryptPassword(newPassword));
    //        this.getTransaction().commit();
    //        //Send mail here
    //
    //        //End send mail
    //        return true;
    //    }


    public boolean sendMailNewPassword(String email, Object accId) {
        String newPassword = RandomStringUtils.randomAlphanumeric(8);

        ViewObjectImpl view = this.getSasrmAccounts();
        Key key = new Key(new Object[] { accId });
        Row[] rows = view.findByKey(key, 1);
        if (rows == null || rows.length == 0) {
            return false;
        }
        AccountsRow row = (AccountsRow)rows[0];
        row.setPassword(PerpUtils.EncryptPassword(newPassword));
        this.getTransaction().commit();
        //Send mail here
        //Send_Message_Forgot_Password
        sendMailForgotPassword(email, newPassword);
        //End send mail
        return true;
    }

    public void sendMailForgotPassword(String email, String newPassword) {
        DBTransaction transaction = this.getDBTransaction();
        String sql2 =
            "{call Send_Message_Pkg.Send_Message_Forgot_Password(?,?)}";
        PreparedStatement pstm = null;
        try {
            pstm = transaction.createPreparedStatement(sql2, 2);
            pstm.setString(1, email);
            pstm.setString(2, newPassword);
            int rs = pstm.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error sendMailForgotPassword :" + e);
        } finally {
            DBUtils.close(pstm);
        }
    }

    public Object isEmailExistsInAccountsTable(String email) {
        String sql = "Select Acc_Id from accounts x where lower(x.email)=?";
        DBTransaction trans = this.getDBTransaction();
        PreparedStatement pstm = null;
        ResultSet rs = null;
        try {
            pstm = trans.createPreparedStatement(sql, 1);
            pstm.setString(1, email == null ? null : email.toLowerCase());
            rs = pstm.executeQuery();
            if (rs.next()) {
                return rs.getLong("Acc_Id");
            }
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
        return null;
    }

    public boolean changePassword(oracle.jbo.domain.Number accId,
                                  String newPassword) {
        ViewObjectImpl view = this.getSasrmAccounts();
        Key key = new Key(new Object[] { accId });
        Row[] rows = view.findByKey(key, 1);
        if (rows == null || rows.length == 0) {
            return false;
        }
        AccountsRow row = (AccountsRow)rows[0];
        row.setPassword(PerpUtils.EncryptPassword(newPassword));
        this.getTransaction().commit();
        return true;
    }

    /**
     * Container's getter for LoginHistoriesView1.
     * @return LoginHistoriesView1
     */
    public ViewObjectImpl getLoginHistoriesView1() {
        return (ViewObjectImpl)findViewObject("LoginHistoriesView1");
    }

    public Number writeLoginHistory(LoginHistoryBean bean) {
        ViewObjectImpl view = this.getLoginHistoriesView1();
        LoginHistoriesViewRow newRow = (LoginHistoriesViewRow)view.createRow();

        Sequence lhiSeq = new Sequence("Lhi_Seq", this);
        oracle.jbo.domain.Number lhiId =
            new oracle.jbo.domain.Number(lhiSeq.getValue());

        newRow.setLhiId(lhiId);
        newRow.setAccId(bean.getAccId());
        newRow.setUserName(bean.getUserName());
        newRow.setEnvId(bean.getEnvId());
        newRow.setLoginAt(bean.getLoginAt());
        newRow.setUserName(bean.getUserName());
        newRow.setIpAddress(bean.getIpAddress());
        newRow.setModule(bean.getModule());
        newRow.setPlatform(bean.getPlatform());
        newRow.setUserAgent(bean.getUserAgent());
        newRow.setCountry(bean.getCountry());
        newRow.setStatus(bean.getStatus());
        newRow.setAttribute1(bean.getAttribute1());
        newRow.setAttribute2(bean.getAttribute2());
        newRow.setAttribute3(bean.getAttribute3());
        newRow.setAttribute4(bean.getAttribute4());
        newRow.setAttribute5(bean.getAttribute5());
        view.insertRow(newRow);

        this.getTransaction().commit();
        bean.setLhiId(newRow.getLhiId());
        return lhiId;
    }


    public void signOut(Number lhiId) {
        DBTransaction transaction = this.getDBTransaction();
        String sql2 =
            "Update Login_Histories Lhi Set Lhi.Logout_At = Sysdate Where Lhi.Lhi_Id = ?";
        PreparedStatement pstm = null;
        try {
            pstm = transaction.createPreparedStatement(sql2, 2);
            pstm.setObject(1, lhiId);
            int rs = pstm.executeUpdate();
            transaction.commit();
        } catch (Exception e) {
            System.out.println("Error logout :" + e);
            transaction.rollback();
        } finally {
            DBUtils.close(pstm);
        }
    }

    public void prepareToShowLoginHistories(String userName) {
        ViewObjectImpl view = this.getLoginHistoriesView1();
        view.setNamedWhereClauseParam("p_User_Name", userName);
        view.executeQuery();
    }

    /**
     * Container's getter for VbisUsersView1.
     * @return VbisUsersView1
     */
    public ViewObjectImpl getVbisUsersView1() {
        return (ViewObjectImpl)findViewObject("VbisUsersView1");
    }

    /**
     * Container's getter for Sasr002A2Subscriptions1.
     * @return Sasr002A2Subscriptions1
     */
    public ViewObjectImpl getSasr002A2Subscriptions1() {
        return (ViewObjectImpl)findViewObject("Sasr002A2Subscriptions1");
    }

    /**
     * Container's getter for VbisUsersView2.
     * @return VbisUsersView2
     */
    public ViewObjectImpl getVbisUsersView2() {
        return (ViewObjectImpl)findViewObject("VbisUsersView2");
    }

    /**
     * Container's getter for VbisUsersFk1Link1.
     * @return VbisUsersFk1Link1
     */
    public ViewLinkImpl getVbisUsersFk1Link1() {
        return (ViewLinkImpl)findViewLink("VbisUsersFk1Link1");
    }

    public void prepareToShowVbisUser(Number accId) {
        ViewObjectImpl view = this.getVbisUsersView1();
        view.setNamedWhereClauseParam("p_Acc_Id", accId);
        view.executeQuery();
    }

    public boolean checkSubExistedByAccId(Number accId) {
        ViewObjectImpl view = this.getSasr002A2Subscriptions();
        view.setNamedWhereClauseParam("p_Acc_Id", accId);
        view.executeQuery();
        return view.hasNext();
    }

    /**
     * Container's getter for VbisUsersView3.
     * @return VbisUsersView3
     */
    public VbisUsersViewImpl getVbisUsersView3() {
        return (VbisUsersViewImpl)findViewObject("VbisUsersView3");
    }

    /**
     * Container's getter for Accounts1.
     * @return Accounts1
     */
    public ViewObjectImpl getAccounts1() {
        return (ViewObjectImpl)findViewObject("Accounts1");
    }

    /**
     * Container's getter for VbisUsers_SasrAccounts.
     * @return VbisUsers_SasrAccounts
     */
    public ViewLinkImpl getVbisUsers_SasrAccounts() {
        return (ViewLinkImpl)findViewLink("VbisUsers_SasrAccounts");
    }

    public boolean checkVbisUserByAccId(Number accId, String userName) {
        String sql =
            "Select 1 from Vbis_Users x where lower(x.User_Name)=? And Acc_Id =?";
        DBTransaction trans = this.getDBTransaction();
        PreparedStatement pstm = null;
        ResultSet rs = null;
        try {
            pstm = trans.createPreparedStatement(sql, 1);
            pstm.setString(1,
                           userName == null ? null : userName.toLowerCase());
            pstm.setObject(2, accId);
            rs = pstm.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
    }

    /**
     * Container's getter for Sasa002Acounts1.
     * @return Sasa002Acounts1
     */
    public ViewObjectImpl getSasa002Acounts() {
        return (ViewObjectImpl)findViewObject("Sasa002Acounts");
    }

    /**
     * Container's getter for Sasa002LoginHistories1.
     * @return Sasa002LoginHistories1
     */
    public ViewObjectImpl getSasa002LoginHistories() {
        return (ViewObjectImpl)findViewObject("Sasa002LoginHistories");
    }

    /**
     * Container's getter for Sasa002Accounts_Sasa002LoginHistories1.
     * @return Sasa002Accounts_Sasa002LoginHistories1
     */
    public ViewLinkImpl getSasa002Accounts_Sasa002LoginHistories1() {
        return (ViewLinkImpl)findViewLink("Sasa002Accounts_Sasa002LoginHistories1");
    }

    /**
     * Container's getter for Sasa002VbisUsers1.
     * @return Sasa002VbisUsers1
     */
    public ViewObjectImpl getSasa002VbisUsers() {
        return (ViewObjectImpl)findViewObject("Sasa002VbisUsers");
    }

    /**
     * Container's getter for Sasa002Accounts_Sasa002VbisUsers1.
     * @return Sasa002Accounts_Sasa002VbisUsers1
     */
    public ViewLinkImpl getSasa002Accounts_Sasa002VbisUsers1() {
        return (ViewLinkImpl)findViewLink("Sasa002Accounts_Sasa002VbisUsers1");
    }

    /**
     * Container's getter for Sasr002A4ServicePackages1.
     * @return Sasr002A4ServicePackages1
     */
    public ViewObjectImpl getSasr002A4ServicePackages() {
        return (ViewObjectImpl)findViewObject("Sasr002A4ServicePackages");
    }

    /**
     * Container's getter for Sasa002SpaSubs1.
     * @return Sasa002SpaSubs1
     */
    public ViewObjectImpl getSasa002SpaSubs() {
        return (ViewObjectImpl)findViewObject("Sasa002SpaSubs");
    }

    /**
     * Container's getter for Sasa002Accounts_Sasa002SpaSubs1.
     * @return Sasa002Accounts_Sasa002SpaSubs1
     */
    public ViewLinkImpl getSasa002Accounts_Sasa002SpaSubs1() {
        return (ViewLinkImpl)findViewLink("Sasa002Accounts_Sasa002SpaSubs1");
    }

    public boolean isAdminUser(Number accId) {
        String sql =
            "Select 1 from Accounts x where x.Acc_Id =? And Nvl(x.Is_Admin, 'N') = 'Y'";
        DBTransaction trans = this.getDBTransaction();
        PreparedStatement pstm = null;
        ResultSet rs = null;
        try {
            pstm = trans.createPreparedStatement(sql, 1);
            pstm.setObject(1, accId);
            rs = pstm.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            DBUtils.close(rs);
            DBUtils.close(pstm);
        }
    }


    /**
     * Container's getter for PerpSasLoginHistories1.
     * @return PerpSasLoginHistories1
     */
    public ViewObjectImpl getPerpSasLoginHistories() {
        return (ViewObjectImpl)findViewObject("PerpSasLoginHistories");
    }

    /**
     * Container's getter for Sasa002Accounts_PerpSasLoginHistories1.
     * @return Sasa002Accounts_PerpSasLoginHistories1
     */
    public ViewLinkImpl getSasa002Accounts_PerpSasLoginHistories1() {
        return (ViewLinkImpl)findViewLink("Sasa002Accounts_PerpSasLoginHistories1");
    }
}
