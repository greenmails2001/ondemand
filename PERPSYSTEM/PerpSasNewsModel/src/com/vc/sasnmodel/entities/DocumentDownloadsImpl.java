package com.vc.sasnmodel.entities;

import com.oracle.adffwkextensions.utils.DateUtils;

import oracle.jbo.Key;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 25 21:12:28 ICT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentDownloadsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DdoId {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDdoId();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDdoId((Number)value);
            }
        },
        DcaId {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDcaId();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDcaId((Number)value);
            }
        },
        Title {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getTitle();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        },
        ShortContent {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getShortContent();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setShortContent((String)value);
            }
        },
        PublicDate {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getPublicDate();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setPublicDate((Date)value);
            }
        },
        DownloadLink {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDownloadLink();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDownloadLink((String)value);
            }
        },
        DownloadData {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDownloadData();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDownloadData((BlobDomain)value);
            }
        },
        DataSize {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDataSize();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDataSize((Number)value);
            }
        },
        DownloadCount {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDownloadCount();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDownloadCount((Number)value);
            }
        },
        PriorityOrder {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getPriorityOrder();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setPriorityOrder((Number)value);
            }
        },
        FileName {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getFileName();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setFileName((String)value);
            }
        },
        FileType {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getFileType();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setFileType((String)value);
            }
        },
        DocumentCategories {
            public Object get(DocumentDownloadsImpl obj) {
                return obj.getDocumentCategories();
            }

            public void put(DocumentDownloadsImpl obj, Object value) {
                obj.setDocumentCategories((EntityImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DocumentDownloadsImpl object);

        public abstract void put(DocumentDownloadsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DDOID = AttributesEnum.DdoId.index();
    public static final int DCAID = AttributesEnum.DcaId.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int SHORTCONTENT = AttributesEnum.ShortContent.index();
    public static final int PUBLICDATE = AttributesEnum.PublicDate.index();
    public static final int DOWNLOADLINK = AttributesEnum.DownloadLink.index();
    public static final int DOWNLOADDATA = AttributesEnum.DownloadData.index();
    public static final int DATASIZE = AttributesEnum.DataSize.index();
    public static final int DOWNLOADCOUNT =
        AttributesEnum.DownloadCount.index();
    public static final int PRIORITYORDER =
        AttributesEnum.PriorityOrder.index();
    public static final int FILENAME = AttributesEnum.FileName.index();
    public static final int FILETYPE = AttributesEnum.FileType.index();
    public static final int DOCUMENTCATEGORIES =
        AttributesEnum.DocumentCategories.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocumentDownloadsImpl() {
    }

    /**
     * Gets the attribute value for DdoId, using the alias name DdoId.
     * @return the DdoId
     */
    public Number getDdoId() {
        return (Number)getAttributeInternal(DDOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DdoId.
     * @param value value to set the DdoId
     */
    public void setDdoId(Number value) {
        setAttributeInternal(DDOID, value);
    }

    /**
     * Gets the attribute value for DcaId, using the alias name DcaId.
     * @return the DcaId
     */
    public Number getDcaId() {
        return (Number)getAttributeInternal(DCAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DcaId.
     * @param value value to set the DcaId
     */
    public void setDcaId(Number value) {
        setAttributeInternal(DCAID, value);
    }

    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the Title
     */
    public String getTitle() {
        return (String)getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for ShortContent, using the alias name ShortContent.
     * @return the ShortContent
     */
    public String getShortContent() {
        return (String)getAttributeInternal(SHORTCONTENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShortContent.
     * @param value value to set the ShortContent
     */
    public void setShortContent(String value) {
        setAttributeInternal(SHORTCONTENT, value);
    }

    /**
     * Gets the attribute value for PublicDate, using the alias name PublicDate.
     * @return the PublicDate
     */
    public Date getPublicDate() {
        return (Date)getAttributeInternal(PUBLICDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PublicDate.
     * @param value value to set the PublicDate
     */
    public void setPublicDate(Date value) {
        setAttributeInternal(PUBLICDATE, value);
    }

    /**
     * Gets the attribute value for DownloadLink, using the alias name DownloadLink.
     * @return the DownloadLink
     */
    public String getDownloadLink() {
        return (String)getAttributeInternal(DOWNLOADLINK);
    }

    /**
     * Sets <code>value</code> as the attribute value for DownloadLink.
     * @param value value to set the DownloadLink
     */
    public void setDownloadLink(String value) {
        setAttributeInternal(DOWNLOADLINK, value);
    }

    /**
     * Gets the attribute value for DownloadData, using the alias name DownloadData.
     * @return the DownloadData
     */
    public BlobDomain getDownloadData() {
        return (BlobDomain)getAttributeInternal(DOWNLOADDATA);
    }

    /**
     * Sets <code>value</code> as the attribute value for DownloadData.
     * @param value value to set the DownloadData
     */
    public void setDownloadData(BlobDomain value) {
        setAttributeInternal(DOWNLOADDATA, value);
    }

    /**
     * Gets the attribute value for DataSize, using the alias name DataSize.
     * @return the DataSize
     */
    public Number getDataSize() {
        return (Number)getAttributeInternal(DATASIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DataSize.
     * @param value value to set the DataSize
     */
    public void setDataSize(Number value) {
        setAttributeInternal(DATASIZE, value);
    }

    /**
     * Gets the attribute value for DownloadCount, using the alias name DownloadCount.
     * @return the DownloadCount
     */
    public Number getDownloadCount() {
        return (Number)getAttributeInternal(DOWNLOADCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DownloadCount.
     * @param value value to set the DownloadCount
     */
    public void setDownloadCount(Number value) {
        setAttributeInternal(DOWNLOADCOUNT, value);
    }

    /**
     * Gets the attribute value for PriorityOrder, using the alias name PriorityOrder.
     * @return the PriorityOrder
     */
    public Number getPriorityOrder() {
        return (Number)getAttributeInternal(PRIORITYORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PriorityOrder.
     * @param value value to set the PriorityOrder
     */
    public void setPriorityOrder(Number value) {
        setAttributeInternal(PRIORITYORDER, value);
    }

    /**
     * Gets the attribute value for FileName, using the alias name FileName.
     * @return the FileName
     */
    public String getFileName() {
        return (String)getAttributeInternal(FILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileName.
     * @param value value to set the FileName
     */
    public void setFileName(String value) {
        setAttributeInternal(FILENAME, value);
    }

    /**
     * Gets the attribute value for FileType, using the alias name FileType.
     * @return the FileType
     */
    public String getFileType() {
        return (String)getAttributeInternal(FILETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileType.
     * @param value value to set the FileType
     */
    public void setFileType(String value) {
        setAttributeInternal(FILETYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDocumentCategories() {
        return (EntityImpl)getAttributeInternal(DOCUMENTCATEGORIES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDocumentCategories(EntityImpl value) {
        setAttributeInternal(DOCUMENTCATEGORIES, value);
    }

    /**
     * @param ddoId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number ddoId) {
        return new Key(new Object[] { ddoId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("com.vc.sasnmodel.entities.DocumentDownloads");
        }
        return mDefinitionObject;
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq =
                new SequenceImpl("DDO_SEQ", this.getDBTransaction());
            Number ddoId = seq.getSequenceNumber();
            this.setDdoId(ddoId);
            if (this.getDownloadCount() == null) {
                this.setDownloadCount(new Number(0));
            }
            if (this.getPriorityOrder() == null) {
                this.setPriorityOrder(new Number(0));
            }
            super.doDML(operation, e);
        } else if (operation == DML_UPDATE) {
            super.doDML(operation, e);
        } else {
            super.doDML(operation, e);
        }
    }
}
