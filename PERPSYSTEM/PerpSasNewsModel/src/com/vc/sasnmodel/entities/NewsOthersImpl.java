package com.vc.sasnmodel.entities;

import oracle.jbo.Key;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 04 14:02:22 ICT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NewsOthersImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        NotId {
            public Object get(NewsOthersImpl obj) {
                return obj.getNotId();
            }

            public void put(NewsOthersImpl obj, Object value) {
                obj.setNotId((Number)value);
            }
        },
        NotNumber {
            public Object get(NewsOthersImpl obj) {
                return obj.getNotNumber();
            }

            public void put(NewsOthersImpl obj, Object value) {
                obj.setNotNumber((String)value);
            }
        },
        Title {
            public Object get(NewsOthersImpl obj) {
                return obj.getTitle();
            }

            public void put(NewsOthersImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        },
        Content {
            public Object get(NewsOthersImpl obj) {
                return obj.getContent();
            }

            public void put(NewsOthersImpl obj, Object value) {
                obj.setContent((ClobDomain)value);
            }
        },
        Description {
            public Object get(NewsOthersImpl obj) {
                return obj.getDescription();
            }

            public void put(NewsOthersImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(NewsOthersImpl object);

        public abstract void put(NewsOthersImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int NOTID = AttributesEnum.NotId.index();
    public static final int NOTNUMBER = AttributesEnum.NotNumber.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int CONTENT = AttributesEnum.Content.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();

    /**
     * This is the default constructor (do not remove).
     */
    public NewsOthersImpl() {
    }

    /**
     * Gets the attribute value for NotId, using the alias name NotId.
     * @return the NotId
     */
    public Number getNotId() {
        return (Number)getAttributeInternal(NOTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for NotId.
     * @param value value to set the NotId
     */
    public void setNotId(Number value) {
        setAttributeInternal(NOTID, value);
    }

    /**
     * Gets the attribute value for NotNumber, using the alias name NotNumber.
     * @return the NotNumber
     */
    public String getNotNumber() {
        return (String)getAttributeInternal(NOTNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for NotNumber.
     * @param value value to set the NotNumber
     */
    public void setNotNumber(String value) {
        setAttributeInternal(NOTNUMBER, value);
    }

    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the Title
     */
    public String getTitle() {
        return (String)getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for Content, using the alias name Content.
     * @return the Content
     */
    public ClobDomain getContent() {
        return (ClobDomain)getAttributeInternal(CONTENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Content.
     * @param value value to set the Content
     */
    public void setContent(ClobDomain value) {
        setAttributeInternal(CONTENT, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param notId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number notId) {
        return new Key(new Object[] { notId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("com.vc.sasnmodel.entities.NewsOthers");
        }
        return mDefinitionObject;
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq =
                new SequenceImpl("NOT_SEQ", this.getDBTransaction());
            Number notId = seq.getSequenceNumber();
            this.setNotId(notId);
        }
        super.doDML(operation, e);
    }
}
