package com.vc.sasnmodel.entities;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 21 22:53:18 ICT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OnlineHelpsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        OheId {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getOheId();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setOheId((Number)value);
            }
        },
        HelpType {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getHelpType();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setHelpType((String)value);
            }
        },
        AgrId {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getAgrId();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setAgrId((Number)value);
            }
        },
        NickName {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getNickName();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setNickName((String)value);
            }
        },
        Note {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getNote();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setNote((String)value);
            }
        },
        Status {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getStatus();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        },
        OnlineHelpTypes {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getOnlineHelpTypes();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setOnlineHelpTypes((EntityImpl)value);
            }
        },
        AnswerGroups {
            public Object get(OnlineHelpsImpl obj) {
                return obj.getAnswerGroups();
            }

            public void put(OnlineHelpsImpl obj, Object value) {
                obj.setAnswerGroups((EntityImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(OnlineHelpsImpl object);

        public abstract void put(OnlineHelpsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int OHEID = AttributesEnum.OheId.index();
    public static final int HELPTYPE = AttributesEnum.HelpType.index();
    public static final int AGRID = AttributesEnum.AgrId.index();
    public static final int NICKNAME = AttributesEnum.NickName.index();
    public static final int NOTE = AttributesEnum.Note.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int ONLINEHELPTYPES =
        AttributesEnum.OnlineHelpTypes.index();
    public static final int ANSWERGROUPS = AttributesEnum.AnswerGroups.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OnlineHelpsImpl() {
    }

    /**
     * Gets the attribute value for OheId, using the alias name OheId.
     * @return the OheId
     */
    public Number getOheId() {
        return (Number)getAttributeInternal(OHEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OheId.
     * @param value value to set the OheId
     */
    public void setOheId(Number value) {
        setAttributeInternal(OHEID, value);
    }

    /**
     * Gets the attribute value for HelpType, using the alias name HelpType.
     * @return the HelpType
     */
    public String getHelpType() {
        return (String)getAttributeInternal(HELPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for HelpType.
     * @param value value to set the HelpType
     */
    public void setHelpType(String value) {
        setAttributeInternal(HELPTYPE, value);
    }

    /**
     * Gets the attribute value for AgrId, using the alias name AgrId.
     * @return the AgrId
     */
    public Number getAgrId() {
        return (Number)getAttributeInternal(AGRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgrId.
     * @param value value to set the AgrId
     */
    public void setAgrId(Number value) {
        setAttributeInternal(AGRID, value);
    }

    /**
     * Gets the attribute value for NickName, using the alias name NickName.
     * @return the NickName
     */
    public String getNickName() {
        return (String)getAttributeInternal(NICKNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for NickName.
     * @param value value to set the NickName
     */
    public void setNickName(String value) {
        setAttributeInternal(NICKNAME, value);
    }

    /**
     * Gets the attribute value for Note, using the alias name Note.
     * @return the Note
     */
    public String getNote() {
        return (String)getAttributeInternal(NOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Note.
     * @param value value to set the Note
     */
    public void setNote(String value) {
        setAttributeInternal(NOTE, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getOnlineHelpTypes() {
        return (EntityImpl)getAttributeInternal(ONLINEHELPTYPES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setOnlineHelpTypes(EntityImpl value) {
        setAttributeInternal(ONLINEHELPTYPES, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getAnswerGroups() {
        return (EntityImpl)getAttributeInternal(ANSWERGROUPS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setAnswerGroups(EntityImpl value) {
        setAttributeInternal(ANSWERGROUPS, value);
    }

    /**
     * @param oheId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number oheId) {
        return new Key(new Object[] { oheId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("com.vc.sasnmodel.entities.OnlineHelps");
        }
        return mDefinitionObject;
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq =
                new SequenceImpl("OHE_SEQ", this.getDBTransaction());
            Number oheId = seq.getSequenceNumber();
            this.setOheId(oheId);
        }
        if (this.getStatus() == null) {
            this.setStatus("Y");
        } else if (!(this.getStatus().equals("Y") ||
                     this.getStatus().equals("N"))) {
            this.setStatus("N");
        }
        super.doDML(operation, e);
    }
}
