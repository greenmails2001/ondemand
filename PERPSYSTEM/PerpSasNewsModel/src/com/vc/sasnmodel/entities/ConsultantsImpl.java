package com.vc.sasnmodel.entities;

import com.oracle.adffwkextensions.utils.DateUtils;

import oracle.jbo.Key;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 22 00:09:10 ICT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultantsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ConId {
            public Object get(ConsultantsImpl obj) {
                return obj.getConId();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setConId((Number)value);
            }
        }
        ,
        CcaId {
            public Object get(ConsultantsImpl obj) {
                return obj.getCcaId();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setCcaId((Number)value);
            }
        }
        ,
        Question {
            public Object get(ConsultantsImpl obj) {
                return obj.getQuestion();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setQuestion((String)value);
            }
        }
        ,
        Answer {
            public Object get(ConsultantsImpl obj) {
                return obj.getAnswer();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setAnswer((ClobDomain)value);
            }
        }
        ,
        CreateDate {
            public Object get(ConsultantsImpl obj) {
                return obj.getCreateDate();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setCreateDate((Date)value);
            }
        }
        ,
        CreatedBy {
            public Object get(ConsultantsImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        ModifyDate {
            public Object get(ConsultantsImpl obj) {
                return obj.getModifyDate();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setModifyDate((Date)value);
            }
        }
        ,
        ModifiedBy {
            public Object get(ConsultantsImpl obj) {
                return obj.getModifiedBy();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setModifiedBy((String)value);
            }
        }
        ,
        Description {
            public Object get(ConsultantsImpl obj) {
                return obj.getDescription();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        ShortAnswer {
            public Object get(ConsultantsImpl obj) {
                return obj.getShortAnswer();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setShortAnswer((String)value);
            }
        }
        ,
        PriorityOrder {
            public Object get(ConsultantsImpl obj) {
                return obj.getPriorityOrder();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setPriorityOrder((Number)value);
            }
        }
        ,
        ConsultantCategories {
            public Object get(ConsultantsImpl obj) {
                return obj.getConsultantCategories();
            }

            public void put(ConsultantsImpl obj, Object value) {
                obj.setConsultantCategories((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ConsultantsImpl object);

        public abstract void put(ConsultantsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CONID = AttributesEnum.ConId.index();
    public static final int CCAID = AttributesEnum.CcaId.index();
    public static final int QUESTION = AttributesEnum.Question.index();
    public static final int ANSWER = AttributesEnum.Answer.index();
    public static final int CREATEDATE = AttributesEnum.CreateDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int MODIFYDATE = AttributesEnum.ModifyDate.index();
    public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int SHORTANSWER = AttributesEnum.ShortAnswer.index();
    public static final int PRIORITYORDER = AttributesEnum.PriorityOrder.index();
    public static final int CONSULTANTCATEGORIES = AttributesEnum.ConsultantCategories.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ConsultantsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.vc.sasnmodel.entities.Consultants");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for ConId, using the alias name ConId.
     * @return the ConId
     */
    public Number getConId() {
        return (Number)getAttributeInternal(CONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConId.
     * @param value value to set the ConId
     */
    public void setConId(Number value) {
        setAttributeInternal(CONID, value);
    }

    /**
     * Gets the attribute value for CcaId, using the alias name CcaId.
     * @return the CcaId
     */
    public Number getCcaId() {
        return (Number)getAttributeInternal(CCAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CcaId.
     * @param value value to set the CcaId
     */
    public void setCcaId(Number value) {
        setAttributeInternal(CCAID, value);
    }

    /**
     * Gets the attribute value for Question, using the alias name Question.
     * @return the Question
     */
    public String getQuestion() {
        return (String)getAttributeInternal(QUESTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Question.
     * @param value value to set the Question
     */
    public void setQuestion(String value) {
        setAttributeInternal(QUESTION, value);
    }

    /**
     * Gets the attribute value for Answer, using the alias name Answer.
     * @return the Answer
     */
    public ClobDomain getAnswer() {
        return (ClobDomain)getAttributeInternal(ANSWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Answer.
     * @param value value to set the Answer
     */
    public void setAnswer(ClobDomain value) {
        setAttributeInternal(ANSWER, value);
    }

    /**
     * Gets the attribute value for CreateDate, using the alias name CreateDate.
     * @return the CreateDate
     */
    public Date getCreateDate() {
        return (Date)getAttributeInternal(CREATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreateDate.
     * @param value value to set the CreateDate
     */
    public void setCreateDate(Date value) {
        setAttributeInternal(CREATEDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for ModifyDate, using the alias name ModifyDate.
     * @return the ModifyDate
     */
    public Date getModifyDate() {
        return (Date)getAttributeInternal(MODIFYDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifyDate.
     * @param value value to set the ModifyDate
     */
    public void setModifyDate(Date value) {
        setAttributeInternal(MODIFYDATE, value);
    }

    /**
     * Gets the attribute value for ModifiedBy, using the alias name ModifiedBy.
     * @return the ModifiedBy
     */
    public String getModifiedBy() {
        return (String)getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedBy.
     * @param value value to set the ModifiedBy
     */
    public void setModifiedBy(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ShortAnswer, using the alias name ShortAnswer.
     * @return the ShortAnswer
     */
    public String getShortAnswer() {
        return (String)getAttributeInternal(SHORTANSWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShortAnswer.
     * @param value value to set the ShortAnswer
     */
    public void setShortAnswer(String value) {
        setAttributeInternal(SHORTANSWER, value);
    }

    /**
     * Gets the attribute value for PriorityOrder, using the alias name PriorityOrder.
     * @return the PriorityOrder
     */
    public Number getPriorityOrder() {
        return (Number)getAttributeInternal(PRIORITYORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PriorityOrder.
     * @param value value to set the PriorityOrder
     */
    public void setPriorityOrder(Number value) {
        setAttributeInternal(PRIORITYORDER, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getConsultantCategories() {
        return (EntityImpl)getAttributeInternal(CONSULTANTCATEGORIES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setConsultantCategories(EntityImpl value) {
        setAttributeInternal(CONSULTANTCATEGORIES, value);
    }


    /**
     * @param conId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number conId) {
        return new Key(new Object[]{conId});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            SequenceImpl seq =
                new SequenceImpl("CON_SEQ", this.getDBTransaction());
            Number conId = seq.getSequenceNumber();
            this.setConId(conId);
            this.setCreateDate(DateUtils.getOracleSysdate());
            this.setCreatedBy("hatv");
            super.doDML(operation, e);
        } else if (operation == DML_UPDATE) {
            this.setModifyDate(DateUtils.getOracleSysdate());
            this.setModifiedBy("hatv");
            super.doDML(operation, e);
        } else {
            super.doDML(operation, e);
        }
    }
}
