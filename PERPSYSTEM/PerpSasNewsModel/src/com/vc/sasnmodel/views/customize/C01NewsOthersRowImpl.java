package com.vc.sasnmodel.views.customize;

import com.vc.sasnmodel.views.customize.common.C01NewsOthersRow;

import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 22 22:22:30 ICT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class C01NewsOthersRowImpl extends ViewRowImpl implements C01NewsOthersRow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        NotId {
            public Object get(C01NewsOthersRowImpl obj) {
                return obj.getNotId();
            }

            public void put(C01NewsOthersRowImpl obj, Object value) {
                obj.setNotId((Number)value);
            }
        }
        ,
        NotNumber {
            public Object get(C01NewsOthersRowImpl obj) {
                return obj.getNotNumber();
            }

            public void put(C01NewsOthersRowImpl obj, Object value) {
                obj.setNotNumber((String)value);
            }
        }
        ,
        Title {
            public Object get(C01NewsOthersRowImpl obj) {
                return obj.getTitle();
            }

            public void put(C01NewsOthersRowImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        }
        ,
        Content {
            public Object get(C01NewsOthersRowImpl obj) {
                return obj.getContent();
            }

            public void put(C01NewsOthersRowImpl obj, Object value) {
                obj.setContent((ClobDomain)value);
            }
        }
        ,
        Description {
            public Object get(C01NewsOthersRowImpl obj) {
                return obj.getDescription();
            }

            public void put(C01NewsOthersRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(C01NewsOthersRowImpl object);

        public abstract void put(C01NewsOthersRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int NOTID = AttributesEnum.NotId.index();
    public static final int NOTNUMBER = AttributesEnum.NotNumber.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int CONTENT = AttributesEnum.Content.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();

    /**
     * This is the default constructor (do not remove).
     */
    public C01NewsOthersRowImpl() {
    }

    /**
     * Gets NewsOthers entity object.
     * @return the NewsOthers
     */
    public EntityImpl getNewsOthers() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for NOT_ID using the alias name NotId.
     * @return the NOT_ID
     */
    public Number getNotId() {
        return (Number) getAttributeInternal(NOTID);
    }

    /**
     * Sets <code>value</code> as attribute value for NOT_ID using the alias name NotId.
     * @param value value to set the NOT_ID
     */
    public void setNotId(Number value) {
        setAttributeInternal(NOTID, value);
    }

    /**
     * Gets the attribute value for NOT_NUMBER using the alias name NotNumber.
     * @return the NOT_NUMBER
     */
    public String getNotNumber() {
        return (String) getAttributeInternal(NOTNUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for NOT_NUMBER using the alias name NotNumber.
     * @param value value to set the NOT_NUMBER
     */
    public void setNotNumber(String value) {
        setAttributeInternal(NOTNUMBER, value);
    }

    /**
     * Gets the attribute value for TITLE using the alias name Title.
     * @return the TITLE
     */
    public String getTitle() {
        return (String) getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as attribute value for TITLE using the alias name Title.
     * @param value value to set the TITLE
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for CONTENT using the alias name Content.
     * @return the CONTENT
     */
    public ClobDomain getContent() {
        return (ClobDomain) getAttributeInternal(CONTENT);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTENT using the alias name Content.
     * @param value value to set the CONTENT
     */
    public void setContent(ClobDomain value) {
        setAttributeInternal(CONTENT, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
